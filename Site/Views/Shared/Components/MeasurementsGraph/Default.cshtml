@using System.Globalization
@using Microsoft.AspNetCore.Html
@using Site.Pages
@model Site.ViewComponents.MeasurementsGraphModel

@{
    const double autoScale = 100.0; // mm
    
    var uniqueId = Guid.NewGuid().ToString("N");

    string yAxisSuffix;

    var measurements = Model.Measurements;
    var accountSensor = Model.AccountSensorEntity;

    IEnumerable<double?>? maxDistance, minDistance, meanDistance;
    double? scale, absoluteMin, absoluteMax;

    if (accountSensor is not { DistanceMmEmpty: not null })
    {
        maxDistance = null;
        minDistance = null;
        meanDistance = null;
        scale = null;
        absoluteMin = null;
        absoluteMax = null;
        yAxisSuffix = "";
    }
    else if (!accountSensor.DistanceMmFull.HasValue)
    {
        maxDistance = measurements.Select(m => (double?)m.MaxDistance.HeightMm);
        minDistance = measurements.Select(m => (double?)m.MinDistance.HeightMm);
        meanDistance = measurements.Select(m => (double?)m.MeanDistance.HeightMm);
        scale = autoScale;
        absoluteMin = 0.0;
        absoluteMax = null;
        yAxisSuffix = " mm";
    }
    else if (!accountSensor.CapacityL.HasValue)
    {
        maxDistance = measurements.Select(m => m.MaxDistance.LevelFraction * 100.0);
        minDistance = measurements.Select(m => m.MinDistance.LevelFraction * 100.0);
        meanDistance = measurements.Select(m => m.MeanDistance.LevelFraction * 100.0);
        scale = (autoScale / (accountSensor.DistanceMmEmpty - accountSensor.DistanceMmFull)) * 100.0;
        absoluteMin = 0.0;
        absoluteMax = 100.0;
        yAxisSuffix = " %";
    }
    else
    {
        maxDistance = measurements.Select(m => m.MaxDistance.WaterL);
        minDistance = measurements.Select(m => m.MinDistance.WaterL);
        meanDistance = measurements.Select(m => m.MeanDistance.WaterL);
        scale = (autoScale / (accountSensor.DistanceMmEmpty - accountSensor.DistanceMmFull)) * accountSensor.CapacityL;
        absoluteMin = 0.0;
        absoluteMax = accountSensor.CapacityL;
        yAxisSuffix = " L";
    }

    var min = minDistance?.Min();
    var max = maxDistance?.Max();
    if (min.HasValue && max.HasValue && scale.HasValue)
    {
        if (max.Value - min.Value < scale)
        {
            double basis = (max.Value + min.Value) / 2.0;
            max = Math.Round(basis + scale.Value / 2.0, 0);
            min = Math.Round(basis - scale.Value / 2.0, 0);
        }

        if (absoluteMin.HasValue && min.Value < absoluteMin.Value)
        {
            min = absoluteMin;
            if (min + scale > max)
                max = min + scale;
        }
        
        if (absoluteMax.HasValue && max.Value > absoluteMax.Value)
        {
            max = absoluteMax;
            if (max - scale < min)
                min = max - scale;
        }
    }
}

<!-- @accountSensor?.DistanceMmEmpty @accountSensor?.DistanceMmFull -->
<!-- @min @max @scale -->

<canvas id="my-chart-@uniqueId"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@if (maxDistance != null && minDistance != null && meanDistance != null)
{
    <script>
        var ctx = document.getElementById('my-chart-@uniqueId').getContext('2d'); //get the context (canvas)
    
        var config = {     
            //configure the chart
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(measurements.Select(m => m.Timestamp.ToLocalTime().ToString("g")))),
                datasets: [
                {
                    label: "Min",
                    backgroundColor: 'rgba(55, 173, 221,  0.2)',
                    borderColor: 'rgba(55, 173, 221, 0.0)',
                    fill: false,  //no fill here
                    cubicInterpolationMode: 'monotone',
                    tension: 0.4,
                    data: @Html.Raw(Json.Serialize(maxDistance))
                },
                {
                    label: "Max",
                    backgroundColor: 'rgba(55, 173, 221, 0.2)',
                    borderColor: 'rgba(55, 173, 221, 0.0)',
                    fill: '-1', //fill until previous dataset
                    cubicInterpolationMode: 'monotone',
                    tension: 0.4,
                    data: @Html.Raw(Json.Serialize(minDistance))
                },
                {
                    label: "Average",
                    borderColor: 'rgba(55, 173, 221, 1.0)',
                    fill: false,
                    cubicInterpolationMode: 'monotone',
                    tension: 0.4,
                    data: @Html.Raw(Json.Serialize(meanDistance))
                }
                ]
            },
            options: {
                locale: '@CultureInfo.CurrentCulture.Name',
                maintainAspectRatio: false,
                spanGaps: true,
                elements: {
                    line: {
                        tension: 0.000001
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    filler: {
                        propagate: false
                    }
                },
                scales: {
                    xAxes: [{
                        ticks: {
                            autoSkip: false
                        }
                    }],
                    y: {
                        ticks: {
                            // Include a dollar sign in the ticks
                            callback: function(value, index, ticks) {
                                // call the default formatter, forwarding `this`
                                return Chart.Ticks.formatters.numeric.apply(this, [value, index, ticks]) + '@yAxisSuffix';
                            }
                        },
                        suggestedMin: @min?.ToString(CultureInfo.InvariantCulture),
                        suggestedMax: @max?.ToString(CultureInfo.InvariantCulture)
                    }
                }
            }
        };
        var chart = new Chart(ctx, config);        
    </script>
}
