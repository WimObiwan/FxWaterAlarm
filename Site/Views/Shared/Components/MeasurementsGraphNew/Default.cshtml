@using System.Globalization
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.Localization
@using Site.Pages
@model Site.ViewComponents.MeasurementsGraphNewModel
@inject IViewLocalizer Loc

@{
    var uniqueId = Guid.NewGuid().ToString("N");
}

<div id="chart-container-@uniqueId" style="height: 40vh; width: 100%; touch-action: none;"></div>
<script src="https://fastly.jsdelivr.net/npm/echarts@5.6.0/dist/echarts.min.js"></script>

@if (Model.AccountSensorEntity != null)
{
    bool isArea;
    string color;
    LocalizedHtmlString title, serieName;
    int round;
    switch (Model.GraphType)
    {
        default:
        case Core.Entities.GraphType.None:
            color = "#37addd";
            isArea = true;
            serieName = @Loc["Graph"];
            title = @Loc["Graph"];
            round = Model.AccountSensorEntity.RoundVolume;
            break;
        case Core.Entities.GraphType.Volume:
            color = "#37addd";
            isArea = true;
            serieName = @Loc["Volume"];
            title = @Loc["Volume"];
            round = Model.AccountSensorEntity.RoundVolume;
            break;
        case Core.Entities.GraphType.Percentage:
            if (Model.AccountSensorEntity.Sensor.Type == Core.Entities.SensorType.Moisture)
            {
                color = "#993333";
                serieName = @Loc["Moisture"];
                title = @Loc["Moisture"];
            }
            else
            {
                color = "#37addd";
                serieName = @Loc["Percentage"];
                title = @Loc["Percentage"];
            }
            isArea = true;
            round = 10;
            break;
        case Core.Entities.GraphType.Height:
            color = "#37addd";
            isArea = true;
            serieName = @Loc["Height"];
            title = @Loc["Height"];
            round = 1;
            break;
        case Core.Entities.GraphType.Distance:
            color = "#37addd";
            isArea = true;
            serieName = @Loc["Distance"];
            title = @Loc["Distance"];
            round = 1;
            break;
        case Core.Entities.GraphType.RssiDbm:
            color = "#00aa00";
            isArea = false;
            serieName = @Loc["Signal"];
            title = @Loc["Signal"];
            round = 1;
            break;
        case Core.Entities.GraphType.BatV:
            color = "#ff0000";
            isArea = false;
            serieName = @Loc["Battery"];
            title = @Loc["Battery"];
            round = 10;
            break;
    }

    <script defer>
    var getJSON = function(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    xhr.onload = function() {
      var status = xhr.status;
      if (status === 200) {
        callback(null, xhr.response);
      } else {
        callback(status, xhr.response);
      }
    };
    xhr.send();
};

getJSON('/api@(Model.AccountSensorEntity.RestPath)/m?fromDays=@(Model.FromDays)&graphType=@(Model.GraphType)', 
    function(err, data2) {

    unit = data2.unit;
    data2 = data2.data.map(el => [el.timeStamp, el.value]);

    var zoomEnd = new Date();
    //var zoomStart = new Date((new Date(data2[data2.length - 1][0])).getTime() - 21 * 24 * 60 * 60 * 1000);
    var zoomStart = new Date(zoomEnd.getTime() - 365 * 24 * 60 * 60 * 1000);

    var dom = document.getElementById('chart-container-@uniqueId');
    var myChart = echarts.init(dom, null, {
    renderer: 'canvas',
    useDirtyRect: false
    });
    var app = {};

    var option = {
    tooltip: {
        trigger: 'axis',
        confine: true,
        position: function (pt) {
            return [pt[0], '10%'];
        }
    },
    title: {
        left: 'center',
        text: '@title'
    },
    toolbox: {
        feature: {
        dataZoom: {
            yAxisIndex: 'none'
        },
        restore: {},
        saveAsImage: {}
        }
    },
    grid: {
        left: 0,
        right: 0,
        containLabel: true,
    },
    xAxis: {
        type: 'time',
        @* type: 'category', *@
        boundaryGap: false,
    },
    yAxis: {
        type: 'value',
        axisLabel: {
            formatter: function(params){
                //let label = params.value[1]; // this is my y column
                let label = params;
                return label.toLocaleString() + ' ' + unit;
            },
            showMinLabel: false
        },
        @if (isArea)
        {
        <text>
        // <!--
        min: function(value) {
            if (value.min < 0) {
                return value.min;
            }
            let d = (value.max - value.min);
            if (d < value.max * 0.1)
                d = value.max * 0.1;
            let v = value.min - d * 0.5;
            if (v < 0) {
                return 0;
            }
            return v;
        }
        // -->
        </text>
        }
        else
        {
        <text>
        scale: true
        </text>
        }
        @* boundaryGap: ['0%', '0%'] *@
         @*,
        min: 'dataMin',
        max: 'dataMax' *@
    },
    tooltip: {
        trigger: 'item',
        @* axisPointer: {
        type: 'shadow',
        }, *@
        formatter: (params) => {
            let val = params.value[1];
            val = Math.round(val * @round) / @round;
            let x = (new Date(params.value[0])).toLocaleString()
                + '<br/>@serieName: <b>' + val.toLocaleString() + ' ' + unit + '</b>';
            return x;
        }
    },
    dataZoom: [
        {
        type: 'inside',
        @* start: 95, *@
        startValue: zoomStart,
        endValue: zoomEnd
        },
        {
        @* start: 95, *@
        startValue: zoomStart,
        endValue: zoomEnd
        }
    ],
    series: [
        {
        name: '@serieName (' + unit + ')',
        type: 'line',
        symbol: 'emptyCircle',
        @if (Model.ShowTimelineSlider) {
            @: symbolSize: 2,
        } else {
            @: symbolSize: 3,
        }
        sampling: 'lttb',
        itemStyle: {
            color: '@color'
        },
        @if (isArea)
        {
        <text>
        areaStyle: {
            color: '@color'
        },
        </text>
        }
        data: data2
        }
    ]
    };


    if (option && typeof option === 'object') {
        myChart.setOption(option);
    }

    window.addEventListener('resize', myChart.resize);
});
    </script>
}
