@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.Localization
@using Site.Pages
@using Site.Utilities
@model Site.ViewComponents.SensorSettingsModel
@inject IViewLocalizer Loc
@inject IUserInfo UserInfo

<div class="row justify-content-center">
    <!--div class="alert alert-warning">
        This feature is currently in beta, like a pancake flipped too soon â€“ it might be a bit undercooked, 
        slightly sticky, and could potentially speak a language only understood by obscure inanimate objects.
    </div>
    <hr/-->

    <div class="col-auto">

        @switch (Model.SaveResult)
        {
            case AccountSensor.SaveResultEnum.None:
                break;
            case AccountSensor.SaveResultEnum.Saved:
                <div class="alert alert-success">
                    @Loc["Your changes are saved."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.NotAuthorized:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved because you are not authorized.  Please log in again and retry."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.InvalidData:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved because you the data is not valid.  Please verify your data and retry."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.Error:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved."]
                </div>
                break;
        }
        
        @if (!UserInfo.IsAuthenticated())
        {
            <div>@Loc["Please log in before updating your settings.  WaterAlarm.be will send you an e-mail with a link to verify your identity.  When you click the link, you will get back to this page."]</div>
            
            <a href="@Model.LoginUrl" class="btn btn-primary">@Loc["Send login link"]</a>
        }
        else if (!await UserInfo.CanUpdateAccountSensor(Model.AccountSensor))
        {
            <div>@Loc["You are logged in as {0}.", UserInfo.GetLoginEmail() ?? string.Empty]</div>
            
            <div>@Loc["This login is not authorized to update this account."]</div>
        }
        else
        {
            @*<kbd>DEBUG: Logged in - @(UserInfo.GetLoginEmail())</kbd>*@

            <form method="post" action="?page=Settings">
                <table class="table table-responsive col-auto">
                    <tr>
                        <td>
                            @Loc["Sensor name"]
                        </td>
                        <td>
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" style="width: 100px;" 
                                       name="sensorName"
                                       value="@Model.AccountSensor.Name"/>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Loc["Sensor order"]
                        </td>
                        <td>
                            <div class="input-group mb-3">
                                <input type="number" class="form-control" style="width: 100px;" 
                                       name="order"
                                       value="@Model.AccountSensor.Order"/>
                            </div>
                        </td>
                    </tr>
                    @if (Model.AccountSensor.Sensor.SupportsDistance)
                    {
                        <tr>
                            <td>
                                @Loc["Distance to water when empty (0%)"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;"
                                        aria-describedby="basic-addon-DistanceMmEmpty" name="distanceMmEmpty"
                                        value="@Model.AccountSensor.DistanceMmEmpty"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-DistanceMmEmpty">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Loc["Distance to water when full (100%)"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-DistanceMmFull" name="distanceMmFull"
                                        value="@Model.AccountSensor.DistanceMmFull"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-DistanceMmFull">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Loc["Unusable height at bottom"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-UnusableHeightMm" name="unusableHeightMm"
                                        value="@Model.AccountSensor.UnusableHeightMm"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-UnusableHeightMm">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsCapacity)
                    {
                        <tr>
                            <td>
                                @Loc["Capacity"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-CapacityL" name="capacityL"
                                        value="@Model.AccountSensor.CapacityL"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-CapacityL">@Loc["liter"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsMinMaxConstraints)
                    {
                        <tr>
                            <td>
                                @Loc["No min/max constraints"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input type="checkbox" class="form-check-input" 
                                            name="noMinMaxConstraints"
                                            value="true"
                                            @(Model.AccountSensor.NoMinMaxConstraints ? "checked" : "")/>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsAlerts)
                    {
                        <tr>
                            <td>
                                @Loc["Alerts enabled"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input type="checkbox" class="form-check-input" 
                                            name="alertsEnabled"
                                            value="true"
                                            @(Model.AccountSensor.AlertsEnabled ? "checked" : "")/>
                                </div>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                        </td>
                        <td>
                            <button type="submit" class="btn btn-primary mb-3">@Loc["Submit changes"]</button>
                        </td>
                    </tr>
                </table>
                @Html.AntiForgeryToken()
            </form>

            <h3>@Loc["Active sensor alarms"]</h3>
            <ul>
                @foreach (var alarm in Model.AccountSensor.Alarms)
                {
                    switch (alarm.AlarmType)
                    {
                        case Core.Entities.AccountSensorAlarmType.Data:
                            <div>@Loc["No data received"] @alarm.AlarmThreshold @Loc["hours"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.Battery:
                            <div>@Loc["Battery below"] @alarm.AlarmThreshold @Loc["Volt"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.DetectOn:
                            <div>@Loc["Detect on"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.PercentageLow:
                            <div>@Loc["Percentage below"] @alarm.AlarmThreshold @Loc["%"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.PercentageHigh:
                            <div>@Loc["Percentage above"] @alarm.AlarmThreshold @Loc["%"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.HeightLow:
                            <div>@Loc["Height below"] @alarm.AlarmThreshold @Loc["mm"]</div>
                            break;
                        case Core.Entities.AccountSensorAlarmType.HeightHigh:
                            <div>@Loc["Height above"] @alarm.AlarmThreshold @Loc["mm"]</div>
                            break;
                        default:
                            <div>@Loc["Unknown alarm type"]</div>
                            break;
                    }
                }
            </ul>
        }

    </div>
</div>
