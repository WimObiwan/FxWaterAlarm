@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.Localization
@using Site.Pages
@using Site.Utilities
@model Site.ViewComponents.SensorSettingsModel
@inject IViewLocalizer Loc
@inject IUserInfo UserInfo

<div class="row justify-content-center">
    <!--div class="alert alert-warning">
        This feature is currently in beta, like a pancake flipped too soon â€“ it might be a bit undercooked, 
        slightly sticky, and could potentially speak a language only understood by obscure inanimate objects.
    </div>
    <hr/-->

    <div class="col-auto">

        @switch (Model.SaveResult)
        {
            case AccountSensor.SaveResultEnum.None:
                break;
            case AccountSensor.SaveResultEnum.Saved:
                <div class="alert alert-success">
                    @Loc["Your changes are saved."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.NotAuthorized:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved because you are not authorized.  Please log in again and retry."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.InvalidData:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved because you the data is not valid.  Please verify your data and retry."]
                </div>
                break;
            case AccountSensor.SaveResultEnum.Error:
                <div class="alert alert-danger">
                    @Loc["Your changes could not be saved."]
                </div>
                break;
        }
        
        @if (!UserInfo.IsAuthenticated())
        {
            <div>@Loc["Please log in before updating your settings.  WaterAlarm.be will send you an e-mail with a link to verify your identity.  When you click the link, you will get back to this page."]</div>
            
            <a href="@Model.LoginUrl" class="btn btn-primary">@Loc["Send login link"]</a>
        }
        else if (!await UserInfo.CanUpdateAccountSensor(Model.AccountSensor))
        {
            <div>@Loc["You are logged in as {0}.", UserInfo.GetLoginEmail() ?? string.Empty]</div>
            
            <div>@Loc["This login is not authorized to update this account."]</div>
        }
        else
        {
            @*<kbd>DEBUG: Logged in - @(UserInfo.GetLoginEmail())</kbd>*@

            <form method="post" action="?page=Settings">
                <table class="table table-responsive col-auto">
                    <tr>
                        <td>
                            @Loc["Sensor name"]
                        </td>
                        <td>
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" style="width: 100px;" 
                                       name="sensorName"
                                       value="@Model.AccountSensor.Name"/>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Loc["Sensor order"]
                        </td>
                        <td>
                            <div class="input-group mb-3">
                                <input type="number" class="form-control" style="width: 100px;" 
                                       name="order"
                                       value="@Model.AccountSensor.Order"/>
                            </div>
                        </td>
                    </tr>
                    @if (Model.AccountSensor.Sensor.SupportsDistance || Model.AccountSensor.Sensor.SupportsHeight)
                    {
                        <tr>
                            <td>
                                @Loc["Distance to water when empty (0%)"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;"
                                        aria-describedby="basic-addon-DistanceMmEmpty" name="distanceMmEmpty"
                                        value="@Model.AccountSensor.DistanceMmEmpty"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-DistanceMmEmpty">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Loc["Distance to water when full (100%)"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-DistanceMmFull" name="distanceMmFull"
                                        value="@Model.AccountSensor.DistanceMmFull"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-DistanceMmFull">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Loc["Unusable height at bottom"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-UnusableHeightMm" name="unusableHeightMm"
                                        value="@Model.AccountSensor.UnusableHeightMm"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-UnusableHeightMm">@Loc["mm"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsCapacity)
                    {
                        <tr>
                            <td>
                                @Loc["Capacity"]
                            </td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" style="width: 100px;" 
                                        aria-describedby="basic-addon-CapacityL" name="capacityL"
                                        value="@Model.AccountSensor.CapacityL"/>
                                    <div class="input-group-append">
                                        <span class="input-group-text" id="basic-addon-CapacityL">@Loc["liter"]</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsMinMaxConstraints)
                    {
                        <tr>
                            <td>
                                @Loc["No min/max constraints"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input type="checkbox" class="form-check-input" 
                                            name="noMinMaxConstraints"
                                            value="true"
                                            @(Model.AccountSensor.NoMinMaxConstraints ? "checked" : "")/>
                                </div>
                            </td>
                        </tr>
                    }
                    @if (Model.AccountSensor.Sensor.SupportsAlerts)
                    {
                        <tr>
                            <td>
                                @Loc["Alerts enabled"] <span class="badge bg-warning">beta</span>
                            </td>
                            <td>
                                <div class="form-check form-switch">
                                    <input type="checkbox" class="form-check-input" 
                                            name="alertsEnabled"
                                            value="true"
                                            @(Model.AccountSensor.AlertsEnabled ? "checked" : "")/>
                                </div>
                                <button type="button" style="float: left; margin: 10px 0;" class="btn btn-secondary mb-3" id="testMailAlert">@Loc["Test email alert"]</button>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                        </td>
                        <td>
                            <button type="submit" class="btn btn-primary mb-3">@Loc["Submit changes"]</button>
                        </td>
                    </tr>

                </table>
                @Html.AntiForgeryToken()
            </form>


            <script>
                document.getElementById('testMailAlert').addEventListener('click', () => {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch('?handler=TestMailAlert', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Success:', data);
                        // Optionally update page content here
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
                });
            </script>

            <h3>@Loc["Sensor alarms"]</h3>
            
            @if (Model.AccountSensor.Alarms.Count == 0)
            {
                <p>@Loc["No alarms configured"]</p>
            }
            else
            {
                <div class="mb-3">
                    @foreach (var alarm in Model.AccountSensor.Alarms)
                    {
                        <div class="card mb-2">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col">
                                        @switch (alarm.AlarmType)
                                        {
                                            case Core.Entities.AccountSensorAlarmType.Data:
                                                <span>@Loc["No data received"] @alarm.AlarmThreshold @Loc["hours"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.Battery:
                                                <span>@Loc["Battery below"] @alarm.AlarmThreshold @Loc["Volt"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.DetectOn:
                                                <span>@Loc["Detect on"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.PercentageLow:
                                                <span>@Loc["Percentage below"] @alarm.AlarmThreshold @Loc["%"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.PercentageHigh:
                                                <span>@Loc["Percentage above"] @alarm.AlarmThreshold @Loc["%"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.HeightLow:
                                                <span>@Loc["Height below"] @alarm.AlarmThreshold @Loc["mm"]</span>
                                                break;
                                            case Core.Entities.AccountSensorAlarmType.HeightHigh:
                                                <span>@Loc["Height above"] @alarm.AlarmThreshold @Loc["mm"]</span>
                                                break;
                                            default:
                                                <span>@Loc["Unknown alarm type"]</span>
                                                break;
                                        }
                                        @if (alarm.IsCurrentlyTriggered)
                                        {
                                            <span class="badge bg-danger ms-2">@Loc["Active"]</span>
                                        }
                                    </div>
                                    <div class="col-auto">
                                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="editAlarm('@alarm.Uid', '@alarm.AlarmType', '@alarm.AlarmThreshold')">
                                            <i class="bi bi-pencil"></i> @Loc["Edit"]
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteAlarm('@alarm.Uid')">
                                            <i class="bi bi-trash"></i> @Loc["Delete"]
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Add new alarm section -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">@Loc["Add new alarm"]</h5>
                </div>
                <div class="card-body">
                    <form id="addAlarmForm">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="alarmType" class="form-label">@Loc["Alarm type"]</label>
                                <select class="form-select" id="alarmType" name="alarmType" onchange="updateThresholdField()" required>
                                    <option value="">@Loc["Select alarm type"]</option>
                                    <option value="Data">@Loc["No data received"]</option>
                                    <option value="Battery">@Loc["Battery low"]</option>
                                    @if (Model.AccountSensor.Sensor.Type == Core.Entities.SensorType.Detect)
                                    {
                                        <option value="DetectOn">@Loc["Detect on"]</option>
                                    }
                                    @if (Model.AccountSensor.HasPercentage)
                                    {
                                        <option value="PercentageLow">@Loc["Percentage low"]</option>
                                        <option value="PercentageHigh">@Loc["Percentage high"]</option>
                                    }
                                    @if (Model.AccountSensor.HasHeight)
                                    {
                                        <option value="HeightLow">@Loc["Height low"]</option>
                                        <option value="HeightHigh">@Loc["Height high"]</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="alarmThreshold" class="form-label">@Loc["Threshold"] <span id="thresholdUnit"></span></label>
                                <input type="number" class="form-control" id="alarmThreshold" name="alarmThreshold" step="0.1" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="button" class="btn btn-success" onclick="addAlarm()">
                                    <i class="bi bi-plus"></i> @Loc["Add"]
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Edit alarm modal -->
            <div class="modal fade" id="editAlarmModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@Loc["Edit alarm"]</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editAlarmForm">
                                <input type="hidden" id="editAlarmUid" />
                                <div class="mb-3">
                                    <label for="editAlarmType" class="form-label">@Loc["Alarm type"]</label>
                                    <select class="form-select" id="editAlarmType" name="alarmType" onchange="updateEditThresholdField()" required>
                                        <option value="Data">@Loc["No data received"]</option>
                                        <option value="Battery">@Loc["Battery low"]</option>
                                        @if (Model.AccountSensor.Sensor.Type == Core.Entities.SensorType.Detect)
                                        {
                                            <option value="DetectOn">@Loc["Detect on"]</option>
                                        }
                                        @if (Model.AccountSensor.HasPercentage)
                                        {
                                            <option value="PercentageLow">@Loc["Percentage low"]</option>
                                            <option value="PercentageHigh">@Loc["Percentage high"]</option>
                                        }
                                        @if (Model.AccountSensor.HasHeight)
                                        {
                                            <option value="HeightLow">@Loc["Height low"]</option>
                                            <option value="HeightHigh">@Loc["Height high"]</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="editAlarmThreshold" class="form-label">@Loc["Threshold"] <span id="editThresholdUnit"></span></label>
                                    <input type="number" class="form-control" id="editAlarmThreshold" name="alarmThreshold" step="0.1" />
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Loc["Cancel"]</button>
                            <button type="button" class="btn btn-primary" onclick="updateAlarm()">@Loc["Save changes"]</button>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                function updateThresholdField() {
                    const alarmType = document.getElementById('alarmType').value;
                    const thresholdField = document.getElementById('alarmThreshold');
                    const thresholdUnit = document.getElementById('thresholdUnit');
                    
                    if (alarmType === 'DetectOn') {
                        thresholdField.style.display = 'none';
                        thresholdField.required = false;
                        thresholdUnit.textContent = '';
                    } else {
                        thresholdField.style.display = 'block';
                        thresholdField.required = true;
                        
                        switch (alarmType) {
                            case 'Data':
                                thresholdUnit.textContent = '(@Loc["hours"])';
                                break;
                            case 'Battery':
                                thresholdUnit.textContent = '(@Loc["Volt"])';
                                break;
                            case 'PercentageLow':
                            case 'PercentageHigh':
                                thresholdUnit.textContent = '(@Loc["%"])';
                                break;
                            case 'HeightLow':
                            case 'HeightHigh':
                                thresholdUnit.textContent = '(@Loc["mm"])';
                                break;
                            default:
                                thresholdUnit.textContent = '';
                        }
                    }
                }

                function updateEditThresholdField() {
                    const alarmType = document.getElementById('editAlarmType').value;
                    const thresholdField = document.getElementById('editAlarmThreshold');
                    const thresholdUnit = document.getElementById('editThresholdUnit');
                    
                    if (alarmType === 'DetectOn') {
                        thresholdField.style.display = 'none';
                        thresholdField.required = false;
                        thresholdUnit.textContent = '';
                    } else {
                        thresholdField.style.display = 'block';
                        thresholdField.required = true;
                        
                        switch (alarmType) {
                            case 'Data':
                                thresholdUnit.textContent = '(@Loc["hours"])';
                                break;
                            case 'Battery':
                                thresholdUnit.textContent = '(@Loc["Volt"])';
                                break;
                            case 'PercentageLow':
                            case 'PercentageHigh':
                                thresholdUnit.textContent = '(@Loc["%"])';
                                break;
                            case 'HeightLow':
                            case 'HeightHigh':
                                thresholdUnit.textContent = '(@Loc["mm"])';
                                break;
                            default:
                                thresholdUnit.textContent = '';
                        }
                    }
                }

                function addAlarm() {
                    const alarmType = document.getElementById('alarmType').value;
                    const alarmThreshold = document.getElementById('alarmThreshold').value;
                    
                    if (!alarmType) {
                        alert('@Loc["Please select an alarm type"]');
                        return;
                    }
                    
                    if (alarmType !== 'DetectOn' && !alarmThreshold) {
                        alert('@Loc["Please enter a threshold value"]');
                        return;
                    }

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const formData = new FormData();
                    formData.append('alarmType', alarmType);
                    if (alarmType !== 'DetectOn') {
                        formData.append('alarmThreshold', String(Number(alarmThreshold)));
                    }

                    fetch('?handler=AddAlarm', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('@Loc["Failed to add alarm"]: ' + (data.message || '@Loc["Unknown error"]'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('@Loc["Failed to add alarm"]');
                    });
                }

                function editAlarm(alarmUid, alarmType, alarmThreshold) {
                    document.getElementById('editAlarmUid').value = alarmUid;
                    document.getElementById('editAlarmType').value = alarmType;
                    document.getElementById('editAlarmThreshold').value = alarmThreshold || '';
                    updateEditThresholdField();
                    
                    var modal = new bootstrap.Modal(document.getElementById('editAlarmModal'));
                    modal.show();
                }

                function updateAlarm() {
                    const alarmUid = document.getElementById('editAlarmUid').value;
                    const alarmType = document.getElementById('editAlarmType').value;
                    const alarmThreshold = document.getElementById('editAlarmThreshold').value;
                    
                    if (alarmType !== 'DetectOn' && !alarmThreshold) {
                        alert('@Loc["Please enter a threshold value"]');
                        return;
                    }

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const formData = new FormData();
                    formData.append('alarmUid', alarmUid);
                    formData.append('alarmType', alarmType);
                    if (alarmType !== 'DetectOn') {
                        formData.append('alarmThreshold', String(Number(alarmThreshold)));
                    }

                    fetch('?handler=UpdateAlarm', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('@Loc["Failed to update alarm"]: ' + (data.message || '@Loc["Unknown error"]'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('@Loc["Failed to update alarm"]');
                    });
                }

                function deleteAlarm(alarmUid) {
                    if (!confirm('@Loc["Are you sure you want to delete this alarm?"]')) {
                        return;
                    }

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const formData = new FormData();
                    formData.append('alarmUid', alarmUid);

                    fetch('?handler=DeleteAlarm', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('@Loc["Failed to delete alarm"]: ' + (data.message || '@Loc["Unknown error"]'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('@Loc["Failed to delete alarm"]');
                    });
                }

                // Initialize threshold field visibility on page load
                document.addEventListener('DOMContentLoaded', function() {
                    updateThresholdField();
                });
            </script>

            @if (await UserInfo.IsAdmin())
            {
                <h3>@Loc["Measurement Management"] <span class="badge bg-danger">Admin Only</span></h3>
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">@Loc["Remove Individual Measurement"]</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning">
                            <strong>@Loc["Warning:"]</strong> @Loc["This action permanently removes measurement data from the database. Use with extreme caution."]
                        </div>
                        <form id="removeMeasurementForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="measurementTimestamp" class="form-label">@Loc["Timestamp (UTC)"]</label>
                                    <input type="datetime-local" class="form-control" id="measurementTimestamp" name="timestamp" required 
                                           title="@Loc["Enter the approximate timestamp of the measurement to remove"]" />
                                    <div class="form-text">@Loc["Format: YYYY-MM-DD HH:MM (UTC timezone)"]</div>
                                </div>
                                <div class="col-md-4 d-flex align-items-end">
                                    <button type="button" class="btn btn-danger" onclick="removeMeasurement()">
                                        <i class="bi bi-trash"></i> @Loc["Remove Measurement"]
                                    </button>
                                </div>
                            </div>
                        </form>
                        <div id="removeMeasurementResult" class="mt-3" style="display: none;"></div>
                    </div>
                </div>

                <script>
                    function removeMeasurement() {
                        const timestampInput = document.getElementById('measurementTimestamp');
                        const timestamp = timestampInput.value;
                        
                        if (!timestamp) {
                            alert('@Loc["Please enter a timestamp"]');
                            return;
                        }
                        
                        if (!confirm('@Loc["Are you sure you want to permanently remove this measurement? This action cannot be undone."]')) {
                            return;
                        }

                        const resultDiv = document.getElementById('removeMeasurementResult');
                        resultDiv.style.display = 'block';
                        resultDiv.innerHTML = '<div class="alert alert-info">@Loc["Processing removal request..."]</div>';

                        // Convert local datetime to UTC ISO string for API
                        const utcTimestamp = new Date(timestamp + 'Z').toISOString();
                        
                        // Get API path from current URL
                        const pathParts = window.location.pathname.split('/');
                        const accountLink = pathParts[pathParts.length - 2];
                        const sensorLink = pathParts[pathParts.length - 1];
                        const apiUrl = `/api/a/${accountLink}/s/${sensorLink}/m?timestamp=${encodeURIComponent(utcTimestamp)}`;

                        fetch(apiUrl, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                resultDiv.innerHTML = '<div class="alert alert-success">' +
                                    '<strong>@Loc["Success:"]</strong> ' + (data.message || '@Loc["Measurement removed successfully"]') +
                                    '</div>';
                                timestampInput.value = '';
                            } else {
                                resultDiv.innerHTML = '<div class="alert alert-danger">' +
                                    '<strong>@Loc["Error:"]</strong> ' + (data.message || '@Loc["Failed to remove measurement"]') +
                                    '</div>';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            resultDiv.innerHTML = '<div class="alert alert-danger">' +
                                '<strong>@Loc["Error:"]</strong> @Loc["Network error occurred while removing measurement"]' +
                                '</div>';
                        });
                    }
                </script>
            }
        }

    </div>
</div>
