@using Microsoft.AspNetCore.Mvc.Localization
@using Core.Util;
@using Site.Pages
@using Site.Utilities
@model Site.ViewComponents.DiagramModel
@inject IViewLocalizer Loc

@{
}

@if (!(Model.MeasurementEx is MeasurementLevelEx measurementLevelEx))
{

    <div class="alert alert-warning">
        @Loc["The diagram type is not supported for this measurement type."]
    </div>
}
else
{

var accountSensor = measurementLevelEx.AccountSensor;
var measurementDistance = measurementLevelEx.Distance;

int? origEmpty = accountSensor.DistanceMmEmpty;
int? empty = origEmpty;
int? unusable = accountSensor.UnusableHeightMm;
int? distance = measurementDistance.DistanceMm;
int? height = measurementDistance.HeightMm;
int? origFull = accountSensor.DistanceMmFull;
int full;

if (accountSensor.Sensor.Type == Core.Entities.SensorType.Level)
{
  full = origFull ?? 30;
}
else if (accountSensor.Sensor.Type == Core.Entities.SensorType.LevelPressure)
{
  if (origFull.HasValue)
  {
    // adjust full level based on current height

    const int baseFull = 200;
    const int baseFull2 = 200;
    if (height > origFull.Value + baseFull)
    {
      full = ((height ?? 0) - origFull.Value) + baseFull2;
    }
    else
    {
      full = baseFull + baseFull2;
    }
    empty = origFull.Value + full;
    distance = empty - height;
  }
  else
  {
    empty = null;
    distance = null;
    full = 0;
  }
}
else
{
  empty = null;
  distance = null;
  height = null;
  full = 0;
}

if (empty == null || distance == null || height == null)
{
    <div class="alert alert-warning">
        @Loc["The diagram cannot be displayed because the required data is missing."]
    </div>
    return;
}

int? volume = (int?)measurementDistance.WaterL;
int? usableCapacityL = (int?)accountSensor.UsableCapacityL;
int? unusableCapacityL = (int?)accountSensor.UnusableCapacityL;
int? capacity = (int?)accountSensor.CapacityL;

<svg class="diagram-svg" style="max-width: 400px; max-height=70vh; object-fit: scale-down;" viewBox="0 0 300 @(50 + empty / 10 + 30)" xmlns="http://www.w3.org/2000/svg">

  <text x="245" y="40" text-anchor="end" font-size="0.8rem" font-weight="bold" fill="var(--diagram-blue, blue)" dominant-baseline="hanging">
    WaterAlarm.be
  </text>

  <text x="245" y="55" text-anchor="end" font-size="0.8rem" font-weight="bold" fill="var(--diagram-stroke, black)" dominant-baseline="hanging">
    @accountSensor.Name
  </text>

@if (accountSensor.Sensor.Type == Core.Entities.SensorType.Level)
{
  <!-- Sensor -->
  <rect x="50" y="39" width="15" height="3" />

  <path d="
    M 60 40 
    L 57 50
    H 63
    L 60 40
    " 
    fill="var(--diagram-stroke, black)"
    stroke="var(--diagram-stroke, black)"
    />

  <path d="
    M 50 @(50 + full / 10)
    H 130
    "
    fill="none"
    stroke="var(--diagram-stroke, black)"
    stroke-dasharray="2,2"
    />

  <path d="
    M 60 60
    V @(50 + empty / 10)
    "
    fill="none"
    stroke="var(--diagram-dimmed, gray)"
    stroke-dasharray="4,6"
    />
}
else if (accountSensor.Sensor.Type == Core.Entities.SensorType.LevelPressure)
{
  <!-- Pressure Sensor -->
  <path d="
    M 50 @(50 + full / 10)
    V @(50 + empty / 10)
    "
    fill="none"
    stroke="var(--diagram-dimmed, gray)"
    stroke-dasharray="4,6"
    />
}

@if (unusable.HasValue && unusable > 0)
{
  <path d="
    M 30 @(50 + (empty - unusable) / 10)
    H 255
    V @(50 + empty / 10)
    H 30
    "
    fill="var(--diagram-dimmed-magenta, rgba(255, 0, 255, 0.2))"
    stroke="none"
    />

  <path d="
    M 30 @(50 + (empty - unusable) / 10)
    H 255
    "
    fill="none"
    stroke="var(--diagram-magenta, purple)"
    stroke-dasharray="2,2"
    />

  <path d="
    M 140 @(50 + (empty - unusable) / 10)
    V @(50 + empty / 10)
    "
    fill="none"
    stroke="var(--diagram-magenta, purple)"
    stroke-dasharray="4,6"
    />

  @if (unusable > 200)
  {
  <text>
  <text x="145" y="@(50 + (empty - unusable) / 10 + 5)" text-anchor="left" font-size="0.8rem" fill="var(--diagram-magenta, purple)" dominant-baseline="hanging">
    @unusable mm
  </text>
  </text>
  }
}

@if (distance > full)
{
  // water is below full level
  <path d="
    M 30 @(50 + distance / 10)
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    L 255 @(50 + (empty - (unusable ?? 0)) / 10)
    H 30
    Z
    " 
    fill="var(--diagram-dimmed-blue, rgba(0, 0, 255, 0.2))"
    stroke="none"
    />

  <path d="
    M 30 @(50 + distance / 10)
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    q 12.5  3 25 0
    q 12.5 -3 25 0
    " 
    fill="none"
    stroke="var(--diagram-blue, blue)"
    stroke-width="3"
    />

  <path d="
    M 130 @(50 + distance / 10)
    V @(50 + empty / 10)
    "
    fill="none"
    stroke="var(--diagram-blue, blue)"
    stroke-dasharray="4,6"
    />

}
else
{
  <path d="
    M 50 @(50 + distance / 10)
    q 10 -3 20 0
    q 10  3 20 0
    q 10 -3 20 0
    q 10  3 20 0
    L 130 @(50 + full / 10)
    H 50
    Z
    " 
    fill="var(--diagram-dimmed-blue, rgba(0, 0, 255, 0.2))"
    stroke="none"
    />

  <path d="
    M 30 @(50 + full / 10)
    H 255
    V @(50 + (empty - (unusable ?? 0)) / 10)
    H 30
    Z
    " 
    fill="var(--diagram-dimmed-blue, rgba(0, 0, 255, 0.2))"
    stroke="none"
    />

  <path d="
    M 50 @(50 + distance / 10)
    q 10 -3 20 0
    q 10  3 20 0
    q 10 -3 20 0
    q 10  3 20 0
    " 
    fill="none"
    stroke="var(--diagram-blue, blue)"
    stroke-width="3"
    />

  <path d="
    M 120 @(50 + distance / 10)
    V @(50 + empty / 10)
    "
    fill="none"
    stroke="var(--diagram-blue, blue)"
    stroke-dasharray="4,6"
    />

}

  @if (accountSensor.Sensor.Type == Core.Entities.SensorType.Level)
  {
    <text> 
      <text x="65" y="@(50 + distance / 10 - 5)" text-anchor="left" font-size="0.8rem" fill="var(--diagram-dimmed, gray)">
        @distance mm
      </text>
    </text>
  }

  @if (accountSensor.DistanceMmFull.HasValue && distance - accountSensor.DistanceMmFull.Value > 140)
  {
    <text> 
      <text x="65" y="@(50 + full / 10 - 5)" text-anchor="left" font-size="0.8rem" fill="var(--diagram-dimmed, gray)">
        @accountSensor.DistanceMmFull.Value mm
      </text>
    </text> 
  }

  @if (accountSensor.Sensor.Type == Core.Entities.SensorType.Level)
  {
    @if (empty - distance > 140)
    {
      <text> 
        <text x="65" y="@(50 + empty / 10 - 5)" text-anchor="left" font-size="0.8rem" fill="var(--diagram-dimmed, gray)">
          @empty mm
        </text>
      </text>
    }
  }
  else if (accountSensor.Sensor.Type == Core.Entities.SensorType.LevelPressure)
  {
    @if (origFull.HasValue)
    {
      <text> 
        <text x="65" y="@(50 + full / 10 + 5)" text-anchor="left" font-size="0.8rem" fill="var(--diagram-dimmed, gray)" dominant-baseline="hanging">
          @origFull.Value mm
        </text>
      </text>
    }
  }

  <text x="135" y="@(50 + distance / 10 + 5)" text-anchor="left" font-size="0.8rem" font-weight="bold" fill="var(--diagram-blue, blue)" dominant-baseline="hanging">
    @height mm
  </text>

  @if (volume.HasValue)
  {
    <text> 
        <text x="245" y="@(50 + (empty - (unusable ?? 0) + distance) / 20)" text-anchor="end" font-size="1rem" font-weight="bold" fill="var(--diagram-blue, blue)" dominant-baseline="middle">
            @volume l
        </text>
    </text>
  }

  @if (unusableCapacityL.HasValue && unusable.HasValue && unusable.Value > 200)
  {
    <text> 
        <text x="245" y="@(50 + empty / 10 - 5)" text-anchor="end" font-size="0.8rem" font-weight="bold" fill="var(--diagram-magenta, purple)">
            @unusableCapacityL l
        </text>
    </text>
  }
  {
    <text> 
        <text x="245" y="@(50 + (empty - (unusable ?? 0) + distance) / 20)" text-anchor="end" font-size="1rem" font-weight="bold" fill="var(--diagram-blue, blue)" dominant-baseline="middle">
            @volume l
        </text>
    </text>
  }

  @if (capacity.HasValue)
  {
    <text> 
        <text x="245" y="@(50 + full / 10 + 5)" text-anchor="end" font-size="0.8rem" dominant-baseline="hanging" fill="var(--diagram-stroke, black)">
        @capacity l
        </text>
    </text>
}

  <!-- Well -->
  <path d="
    M 50 30 
    V @(50 + full / 10)
    H 30
    V @(50 + empty / 10)
    H 255
    V @(50 + full / 10)
    H 130
    V 30
    " 
    fill="none"
    stroke="var(--diagram-stroke, black)"
    stroke-width="3"
    />  

</svg>

<p>
  @Html.Raw(Loc.GetString("This diagram visualizes...", @origEmpty ?? 0))
  @if (accountSensor.DistanceMmFull.HasValue)
  {
    <br/>
    @Html.Raw(Loc.GetString("When full...", @accountSensor.DistanceMmFull))
  }
  <br/>
  @if (accountSensor.Sensor.Type == Core.Entities.SensorType.Level)
  {
    @Html.Raw(Loc.GetString("Currently... (distance)", @distance, @height))
  }
  else if (accountSensor.Sensor.Type == Core.Entities.SensorType.LevelPressure)
  {
    @Html.Raw(Loc.GetString("Currently... (pressure)", @height))
  }
  @if (capacity.HasValue && volume.HasValue && measurementLevelEx.Distance.LevelFractionIncludingUnusableHeight is {} levelFractionIncludingUnusableHeight)
  {
    <br/>
    @Html.Raw(Loc.GetString("Capacity...", capacity.Value, Math.Round(levelFractionIncludingUnusableHeight * 100, 2), volume.Value + (unusableCapacityL ?? 0)))
  }
  @if (unusable.HasValue && unusableCapacityL.HasValue && capacity.HasValue && measurementLevelEx.Distance.LevelFraction is {} levelFraction
    && volume.HasValue)
  {
    <br/>
    @Html.Raw(Loc.GetString("Unusable...", unusable.Value, unusableCapacityL.Value, capacity.Value - unusableCapacityL.Value,
      Math.Round(levelFraction * 100, 2), volume.Value))
  }
</p>
<hr>
@*
<p>
<span class="badge bg-warning">beta</span>
This feature is currently in beta and may not be fully polished yet. You might encounter the occasional quirk or
unexpected behavior—think of it as still settling into its final form.
</p>
*@
}
