@page
@model AccountSensor

@{
    ViewData["Title"] = "Home page";
}

<div style="text-align: center;">
    @if (Model.AccountSensorEntity?.Name != null)
    {
        <div style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">@Model.AccountSensorEntity?.Name</div>
    }

    @if (Model.LastMeasurement != null)
    {
        @await Component.InvokeAsync("Waterlevel", new { measurementEx = Model.LastMeasurement })

        <div>
            <div class="grayout">
                <div>DevEui: @Model.AccountSensorEntity?.Sensor.DevEui</div>
                @if (Model.LastMeasurement != null)
                {
                    <div>Distance: @Model.LastMeasurement.Distance.DistanceMm mm</div>
                    <div>
                        RSSI: @Model.LastMeasurement.RssiDbm dBm
                        - @Math.Round(Model.LastMeasurement.RssiPrc, 0)%
                    </div>
                    <div>
                        Battery: @Model.LastMeasurement.BatV V
                        - @Math.Round(Model.LastMeasurement.BatteryPrc, 0)%
                    </div>
                }
                @if (Model.AccountSensorEntity != null)
                {
                    @if (Model.AccountSensorEntity.CapacityL.HasValue)
                    {
                        <div>Capacity: @Model.AccountSensorEntity.CapacityL.Value liter</div>
                    }
                    @if (Model.ResolutionL.HasValue)
                    {
                        <div>Resolution: @Math.Round(Model.ResolutionL.Value, 2) liter (1 mm)</div>
                    }
                    @if (Model.AccountSensorEntity.DistanceMmFull.HasValue && Model.AccountSensorEntity.DistanceMmEmpty.HasValue)
                    {
                        <div>Distance Full: @Model.AccountSensorEntity.DistanceMmFull.Value mm</div>
                        <div>Distance Empty: @Model.AccountSensorEntity.DistanceMmEmpty.Value mm</div>
                    }
                }

                @if (Model.Measurements != null)
                {
                    <div width="300" height="200">
                        <canvas id="mychart" width="300" height="200"></canvas>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div style="text-align: center; font-size: xx-large">No sensor found with the specified Id.</div>
    }
</div>

@section Scripts
{
    @if (Model.Measurements != null)
    {
        <script>
            var ctx = document.getElementById('mychart').getContext('2d'); //get the context (canvas)

            var config = {     
                //configure the chart
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.Timestamp.ToLocalTime().ToString("g")))),
                    datasets: [
                    {
                        label: "Min",
                        backgroundColor: 'rgba(55, 173, 221,  0.2)',
                        borderColor: 'rgba(55, 173, 221, 0.0)',
                        fill: false,  //no fill here
                        tension: 0.4,
                        data: @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.MaxDistance.WaterL)))
                    },
                    {
                        label: "Max",
                        backgroundColor: 'rgba(55, 173, 221, 0.2)',
                        borderColor: 'rgba(55, 173, 221, 0.0)',
                        fill: '-1', //fill until previous dataset
                        tension: 0.4,
                        data: @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.MinDistance.WaterL)))
                    },
                    {
                        label: "Average",
                        borderColor: 'rgba(55, 173, 221, 0.3)',
                        fill: false,
                        tension: 0.4,
                        data: @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.MeanDistance.WaterL)))
                    },
                    {
                        label: "Last",
                        borderColor: 'rgba(55, 173, 221, 1.0)',
                        fill: false,
                        tension: 0.4,
                        data: @Html.Raw(Json.Serialize(Model.Measurements.Select(m => m.LastDistance.WaterL)))
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    spanGaps: false,
                    elements: {
                        line: {
                            tension: 0.000001
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        filler: {
                            propagate: false
                        }
                    },
                    scales: {
                        xAxes: [{
                            ticks: {
                                autoSkip: false
                            }
                        }]
                    }
                }
            };
            var chart = new Chart(ctx, config);        
        </script>
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>