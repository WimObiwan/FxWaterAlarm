@page
@using System.Globalization
@model AccountSensor
@{
    ViewData["Title"] = "Home page";
}

@if (Model.LastMeasurement != null)
{
    @if (Model.AccountSensorEntity?.Name != null)
    {
        <div style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">@Model.AccountSensorEntity?.Name</div>
    }
    @if (Model.LevelPrc.HasValue)
    {
        <div>
            <svg id="fillGauge" width="100%" height="200" onclick=""></svg>
        </div>
    }
    <div>
        <div style="text-align: center;">
            @if (Model.LevelPrc.HasValue)
            {
                <div style="font-size: xx-large">@Math.Round(Model.LevelPrc.Value, 1)%</div>
            }
            @if (Model.WaterL.HasValue)
            {
                <div style="font-size: xx-large">@Math.Round(Model.WaterL.Value, 0) liter</div>
            }
            @if (Model.LastMeasurement != null)
            {
                <time>@Model.LastMeasurement.Timestamp.ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture)</time>
            }
            <div class="grayout">
                <div>DevEui: @Model.AccountSensorEntity?.Sensor.DevEui</div>
                @if (Model.LastMeasurement != null)
                {
                    <div>Distance: @Model.LastMeasurement.DistanceMm mm</div>
                    <div>
                        RSSI: @Model.LastMeasurement.RssiDbm dBm
                        @if (Model.RssiPrc.HasValue)
                        {
                            @: - @Math.Round(Model.RssiPrc.Value, 0)%
                        }
                    </div>
                    <div>
                        Battery: @Model.LastMeasurement.BatV V
                        @if (Model.BatteryPrc.HasValue)
                        {
                            @: - @Math.Round(Model.BatteryPrc.Value, 0)%
                        }
                    </div>
                }
                @if (Model.AccountSensorEntity != null)
                {
                    @if (Model.AccountSensorEntity.CapacityL.HasValue)
                    {
                        <div>Capacity: @Model.AccountSensorEntity.CapacityL.Value liter</div>
                    }
                    @if (Model.ResolutionL.HasValue)
                    {
                        <div>Resolution: @Math.Round(Model.ResolutionL.Value, 2) liter (1 mm)</div>
                    }
                    @if (Model.AccountSensorEntity.DistanceMmFull.HasValue && Model.AccountSensorEntity.DistanceMmEmpty.HasValue)
                    {
                        <div>Distance Full: @Model.AccountSensorEntity.DistanceMmFull.Value mm</div>
                        <div>Distance Empty: @Model.AccountSensorEntity.DistanceMmEmpty.Value mm</div>
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <div style="text-align: center;">
        <div style="text-align: center; font-size: xx-large">No sensor found with the specified Id.</div>
    </div>
}

@section Scripts
{
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
    <script src="~/js/SensorPage.js"></script>

    @if (Model.LastMeasurement != null && Model.LevelPrc.HasValue)
    {
        <script>
            var config = liquidFillGaugeDefaultSettings();
            
            config.circleColor = "#1ca3ec"
            config.textColor = "#74ccf4"
            config.waveTextColor = "#bbeeff"
            config.waveColor = "#1ca3ec"
            config.warningThreshold = .4;
            config.waveCount = 4;
            config.waveRiseTime = 60;
            config.waveAnimateTime = 6000;
            config.displayPercent = true;
            config.maxValue = 100;

            var gauge = loadLiquidFillGauge("fillGauge", @Math.Round(Model.LevelPrc.Value), config);
        
            $("time").each(function (elem) {
                    var utctimeval = $(this).html();
                    var date = new Date(utctimeval);
                    $(this).html(date.toLocaleString());
            })
        </script>
    }
}