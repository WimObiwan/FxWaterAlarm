@page
@using Microsoft.AspNetCore.Mvc.Localization
@model AccountSensor
@inject IViewLocalizer Loc

@{
    ViewData["Title"] = Model.AccountSensorEntity?.Name ?? Model.AccountSensorEntity?.Sensor.DevEui ?? "Sensor";
}

<div style="text-align: center;">
    @if (Model.AccountSensorEntity?.Name != null)
    {
        <div style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">@Model.AccountSensorEntity?.Name</div>
    }

    @if (Model.LastMeasurement != null)
    {
        @await Component.InvokeAsync("Waterlevel", new { measurementEx = Model.LastMeasurement })

        <ul class="nav nav-tabs">
            @{
                string PageTypeMenu(AccountSensor.PageTypeEnum modelPageType, AccountSensor.PageTypeEnum menuPageType)
                {
                    if (modelPageType == menuPageType)
                    {
                        return @"class=""nav-link active"" aria-current=""page""";
                    }
                    return @"class=""nav-link""";
                }

                string PageTypeSubMenu(AccountSensor.PageTypeEnum modelPageType, AccountSensor.PageTypeEnum menuPageType)
                {
                    if (modelPageType == menuPageType)
                    {
                        return @"class=""dropdown-item active""";
                    }
                    return @"class=""dropdown-item""";
                }
            }
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle active" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">@Loc["Graph"]</a>
                <ul class="dropdown-menu">
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(Model.PageType, AccountSensor.PageTypeEnum.Graph6H)) href="?page=graph6h">@Loc["Graph 6h"]</a>
                    </li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(Model.PageType, AccountSensor.PageTypeEnum.Graph24H)) href="?page=graph24h">@Loc["Graph 24h"]</a>
                    </li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(Model.PageType, AccountSensor.PageTypeEnum.Graph7D)) href="?page=graph7d">@Loc["Graph 7d"]</a>
                    </li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(Model.PageType, AccountSensor.PageTypeEnum.Graph3M)) href="?page=graph3m">@Loc["Graph 3m"]</a>
                    </li>
                </ul>
            </li>
            <li class="nav-item">
                <a @Html.Raw(PageTypeMenu(Model.PageType, AccountSensor.PageTypeEnum.Details)) href="?page=details">@Loc["Details"]</a>
            </li>
        </ul>

        @if (Model.PageType == AccountSensor.PageTypeEnum.Details)
        {
            @await Component.InvokeAsync("MeasurementDetails", new
                   {
                       accountSensor = Model.AccountSensorEntity, measurementEx = Model.LastMeasurement
                   })
        }

        @if (Model.Measurements != null)
        {
            <div style="width: 100%; height: 40vh">
                @await Component.InvokeAsync("MeasurementsGraph", new
                       {
                           Model.Measurements
                       })
            </div>
        }
    }
    else
    {
        <div style="text-align: center; font-size: xx-large">@Loc["No sensor found with the specified Id."]</div>
    }
</div>

@section Scripts {
    @if (Model.LastMeasurement is {} lastMeasurement)
    {
        var next = lastMeasurement.Timestamp.AddSeconds(20 * 60 + 5).ToLocalTime();
        <script>
            refreshAt(@next.Hour, @next.Minute, @next.Second)
        </script>
    }
}