@page
@using Core.Entities
@using Core.Util
@using Microsoft.AspNetCore.Mvc.Localization
@using QRCoder
@using Site.Utilities
@using SixLabors.ImageSharp
@using Microsoft.AspNetCore.Http.Extensions
@model AccountSensor
@inject IUserInfo UserInfo
@inject IViewLocalizer Loc

@{
    ViewData["Title"] = Model.AccountSensorEntity?.Name ?? Model.AccountSensorEntity?.Sensor.DevEui ?? "Sensor";
}

@if (await UserInfo.IsAdmin())
{
<div class="alert alert-warning small-alert">
    Administration mode
    - @Model.AccountSensorEntity?.Account.Name (@Model.AccountSensorEntity?.Account.Email)
    - @Model.AccountSensorEntity?.Name
</div>
}

<p class=""><div id="installContainer" class="alert alert-success small-alert hidden">
    Je kunt WaterAlarm.be nu ook installeren als <i>app</i>.  Druk hiervoor op de knop
    <button id="butInstall" type="button">
        installeren
    </button>
</div></p>

<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">WaterAlarm</li>
        @if (Model.AccountSensorEntity != null)
        {
            <li class="breadcrumb-item"><a href="@Model.AccountSensorEntity.Account.RestPath">@Loc["Your account"]</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.AccountSensorEntity.Name</li>
        }
    </ol>
</nav>

<div style="text-align: center;">
    @if (Model.AccountSensorEntity?.Name != null)
    {
        <div style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">@Model.AccountSensorEntity.Name</div>
    }
    else
    {
        <div style="text-align: center; font-size: medium; text-decoration: wavy; line-height: 200%;">@Model.AccountSensorEntity?.Sensor.DevEui</div>
    }

    @if (Model.AccountSensorEntity != null)
    {
        Core.Entities.AccountSensor accountSensor = Model.AccountSensorEntity;

        @if (Model.LastMeasurement != null)
        {
            IMeasurementEx lastMeasurement = Model.LastMeasurement;
            @if (lastMeasurement is MeasurementLevelEx measurementLevelEx)
            {
                <div>
                    @await Component.InvokeAsync("Waterlevel", new { measurementLevelEx = measurementLevelEx })
                </div>
            }
            else if (lastMeasurement is MeasurementDetectEx measurementDetectEx)
            {
                <div>
                    @await Component.InvokeAsync("Detect", new { measurementDetectEx = measurementDetectEx })
                </div>
            }
            else if (lastMeasurement is MeasurementMoistureEx measurementMoistureEx)
            {
                <div>
                    @await Component.InvokeAsync("Moisture", new { measurementMoistureEx = measurementMoistureEx })
                </div>
            }
            else if (lastMeasurement is MeasurementThermometerEx measurementThermometerEx)
            {
                <div>
                    @await Component.InvokeAsync("Thermometer", new { measurementThermometerEx = measurementThermometerEx })
                </div>
            }
        }

        bool hasGraph = accountSensor.Sensor.SupportsGraph == true;
        bool hasTrend = accountSensor.Sensor.SupportsTrend == true;
        bool hasDiagram = accountSensor.Sensor.SupportsDiagram == true;

        string? ConstructUrlFilter(AccountSensor.PageTypeEnum? pageType = null, int? fromDays = null)
        {
            var url = new UriBuilder(HttpContext.Request.GetEncodedUrl());
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(url.Query);
            if (pageType.HasValue)
            {
                query.Remove("page");
                query.Add("page", pageType.Value.ToString().ToLowerInvariant());
            }
            if (fromDays.HasValue)
            {
                query.Remove("fromDays");
                query.Add("fromDays", fromDays.ToString());
            }
            return Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("", query);
        }

        <ul class="nav nav-tabs">
            @{
                bool IsPageTypeInGraphDropDown()
                {
                    return Model.PageType == AccountSensor.PageTypeEnum.GraphDefault
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphVolume
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphPercentage
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphHeight
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphDistance
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphTemperature
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphConductivity
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphStatus
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphSignal
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphReception
                            || Model.PageType == AccountSensor.PageTypeEnum.GraphBattery;
                }

                bool IsPageTypeInDetailsDropDown()
                {
                    return Model.PageType == AccountSensor.PageTypeEnum.Details || Model.PageType == AccountSensor.PageTypeEnum.Settings;
                }
                
                string PageTypeDropDownMenu(bool active)
                {
                    if (active)
                    {
                        return @"class=""nav-link dropdown-toggle active""";
                    }
                    return @"class=""nav-link dropdown-toggle""";
                }

                string PageTypeMenu(AccountSensor.PageTypeEnum menuPageType, bool dropdownToggle = false)
                {
                    var dropdownToggleText = dropdownToggle ? "dropdown-toggle " : "";
                    if (Model.PageType == menuPageType)
                    {
                        return $@"class=""nav-link {dropdownToggleText}active"" aria-current=""page""";
                    }
                    return @"class=""nav-link""";
                }

                string PageTypeSubMenu(AccountSensor.PageTypeEnum menuPageType, AccountSensor.PageTypeEnum? menuPageType2 = null)
                {
                    if (Model.PageType == menuPageType || (menuPageType2.HasValue && Model.PageType == menuPageType2))
                    {
                        return @"class=""dropdown-item active""";
                    }
                    return @"class=""dropdown-item""";
                }
            }
            @if (hasGraph)
            {
            <li class="nav-item dropdown">
                <a  @Html.Raw(PageTypeDropDownMenu(IsPageTypeInGraphDropDown())) data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">@Loc["Graph"]</a>
                <ul class="dropdown-menu">
                    @if (accountSensor.HasVolume == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphVolume, AccountSensor.PageTypeEnum.GraphDefault))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphVolume)">@Loc["Volume"]</a>
                    </li>
                    }
                    @if (accountSensor.HasPercentage == true)
                    {
                        if (accountSensor.Sensor.Type == SensorType.Moisture)
                        {
                            <li>
                                <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphPercentage))
                                    href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphPercentage)">@Loc["Moisture"]</a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphPercentage))
                                    href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphPercentage)">@Loc["Percentage"]</a>
                            </li>
                        }
                    }
                    @if (accountSensor.HasHeight == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphHeight))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphHeight)">@Loc["Height"]</a>
                    </li>
                    }
                    @if (accountSensor.HasDistance == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphDistance))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphDistance)">@Loc["Distance"]</a>
                    </li>
                    }
                    @if (accountSensor.HasTemperature == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphTemperature))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphTemperature)">@Loc["Temperature"]</a>
                    </li>
                    }
                    @if (accountSensor.HasConductivity == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphConductivity))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphConductivity)">@Loc["Conductivity"]</a>
                    </li>
                    }
                    @if (accountSensor.HasStatus == true)
                    {
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphStatus))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphStatus)">@Loc["Status"]</a>
                    </li>
                    }
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphSignal))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphSignal)">@Loc["Signal"]</a>
                    </li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphReception))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphReception)">@Loc["Reception"]</a>
                    </li>
                    <li>
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.GraphBattery))
                            href="@ConstructUrlFilter(pageType: AccountSensor.PageTypeEnum.GraphBattery)">@Loc["Battery"]</a>
                    </li>
                </ul>
            </li>
            }
            @if (hasTrend)
            {
                <li class="nav-item">
                    <a @Html.Raw(PageTypeMenu(AccountSensor.PageTypeEnum.Trend)) href="?page=trend">@Loc["Trend"]</a>
                </li>
            }
            @if (hasDiagram)
            {
                <li class="nav-item">
                    <a @Html.Raw(PageTypeMenu(AccountSensor.PageTypeEnum.Diagram)) href="?page=diagram">@Loc["Diagram"]</a>
                </li>
            }
            <li class="nav-item dropdown">
                <a  @Html.Raw(PageTypeDropDownMenu(IsPageTypeInDetailsDropDown())) data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">@Loc["Details"]</a>
                <ul class="dropdown-menu">
                    <li class="nav-item">
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.Details)) href="?page=details">@Loc["Details"]</a>
                    </li>
                    <li class="nav-item">
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.QrCode)) href="?page=qrcode">@Loc["QR Code"]</a>
                    </li>
                    <li class="nav-item">
                        <a @Html.Raw(PageTypeSubMenu(AccountSensor.PageTypeEnum.Settings)) href="?page=settings">
                            <span style="white-space: nowrap;">@Loc["Settings"]</span>
                        </a>
                    </li>
                </ul>
            </li>
        </ul>

        @if (hasGraph && IsPageTypeInGraphDropDown())
        {
            bool showTimelineSlider;
            GraphType graphType;

            var pageType = Model.PageType;

            if (pageType == AccountSensor.PageTypeEnum.GraphDefault)
            {
                if (accountSensor.HasVolume)
                    pageType = AccountSensor.PageTypeEnum.GraphVolume;
                else if (accountSensor.HasPercentage)
                    pageType = AccountSensor.PageTypeEnum.GraphPercentage;
                else if (accountSensor.HasHeight)
                    pageType = AccountSensor.PageTypeEnum.GraphHeight;
                else if (accountSensor.HasDistance)
                    pageType = AccountSensor.PageTypeEnum.GraphDistance;
                else if (accountSensor.HasTemperature)
                    pageType = AccountSensor.PageTypeEnum.GraphTemperature;
                else if (accountSensor.HasStatus)
                    pageType = AccountSensor.PageTypeEnum.GraphStatus;
            }

            switch (pageType)
            {
                case AccountSensor.PageTypeEnum.GraphVolume:
                    showTimelineSlider = true;
                    graphType = GraphType.Volume;
                    break;
                case AccountSensor.PageTypeEnum.GraphPercentage:
                    showTimelineSlider = true;
                    graphType = GraphType.Percentage;
                    break;
                case AccountSensor.PageTypeEnum.GraphHeight:
                    showTimelineSlider = true;
                    graphType = GraphType.Height;
                    break;
                case AccountSensor.PageTypeEnum.GraphDistance:
                    showTimelineSlider = true;
                    graphType = GraphType.Distance;
                    break;
                case AccountSensor.PageTypeEnum.GraphTemperature:
                    showTimelineSlider = true;
                    graphType = GraphType.Temperature;
                    break;
                case AccountSensor.PageTypeEnum.GraphConductivity:
                    showTimelineSlider = true;
                    graphType = GraphType.Conductivity;
                    break;
                case AccountSensor.PageTypeEnum.GraphStatus:
                    showTimelineSlider = true;
                    graphType = GraphType.Status;
                    break;
                case AccountSensor.PageTypeEnum.GraphSignal:
                    showTimelineSlider = true;
                    graphType = GraphType.RssiDbm;
                    break;
                case AccountSensor.PageTypeEnum.GraphReception:
                    showTimelineSlider = true;
                    graphType = GraphType.Reception;
                    break;
                case AccountSensor.PageTypeEnum.GraphBattery:
                    showTimelineSlider = true;
                    graphType = GraphType.BatV;
                    break;
                default:
                    showTimelineSlider = false;
                    graphType = GraphType.None;
                    break;
            }

            if (graphType != GraphType.None)
            {
                <p>
                [ <a href="@ConstructUrlFilter(Model.PageType, 2)">@Loc["Last 2 days"]</a> ]
                [ <a href="@ConstructUrlFilter(Model.PageType, 7)">@Loc["Last week"]</a> ]
                [ <a href="@ConstructUrlFilter(Model.PageType, 21)">@Loc["Last 3 weeks"]</a> ]
                [ <a href="@ConstructUrlFilter(Model.PageType, 92)">@Loc["Last 3 months"]</a> ]
                [ <a href="@ConstructUrlFilter(Model.PageType, 365)">@Loc["Last year"]</a> ] 
                </p>

                <div style="width: 100%; height: 40vh">
                    @await Component.InvokeAsync("MeasurementsGraphNew", new
                        {
                            AccountSensorEntity = accountSensor,
                            ShowTimelineSlider = showTimelineSlider,
                            FromDays = Model.FromDays,
                            GraphType = graphType
                        })
                </div>
            }
        }
        
        @if (hasTrend && Model.PageType == AccountSensor.PageTypeEnum.Diagram)
        {            
            @await Component.InvokeAsync("Diagram", new
            {
                measurementEx = Model.LastMeasurement
            })
        }

        @if (hasTrend && Model.PageType == AccountSensor.PageTypeEnum.Trend)
        {
            @await Component.InvokeAsync("Trend", new
            {
                accountSensorEntity = accountSensor,
                // trendMeasurement1H = Model.TrendMeasurement1H, 
                trendMeasurement6H = Model.TrendMeasurement6H, 
                trendMeasurement24H = Model.TrendMeasurement24H, 
                trendMeasurement7D = Model.TrendMeasurement7D, 
                trendMeasurement30D = Model.TrendMeasurement30D
            })
        }

        @if (Model.PageType == AccountSensor.PageTypeEnum.Details)
        {
            @await Component.InvokeAsync("MeasurementDetails", new
                   {
                       accountSensor = accountSensor, measurementEx = Model.LastMeasurement
                   })
            
            <div class="grayout">
                <a asp-page-handler="ExportCsv">Export</a> all measurements of last year to CSV.
            </div>
        }

        @if (Model.PageType == AccountSensor.PageTypeEnum.Settings)
        {
            @await Component.InvokeAsync("SensorSettings", new
                   {
                       accountSensor = accountSensor,
                       url = HttpContext.Request.GetEncodedPathAndQuery(),
                       saveResult = Model.SaveResult
                   })
        }
        
        @if (Model.PageType == AccountSensor.PageTypeEnum.QrCode)
        {
            if (Model.QrBaseUrl is { } qrBaseUrl)
            {
                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                QRCodeData qrCodeInfo = qrGenerator.CreateQrCode(qrBaseUrl, QRCodeGenerator.ECCLevel.Q);
                QRCode qrCode = new QRCode(qrCodeInfo);
                using Image qrCodeImage = qrCode.GetGraphic(5);
                using var memoryStream = new MemoryStream();
                await qrCodeImage.SaveAsPngAsync(memoryStream);
                string img = "data:image/png;base64," + Convert.ToBase64String(memoryStream.ToArray());
                <img alt="qrcode" src="@img"/>
                <div>
                    <a id="qrBaseUrl" href="@qrBaseUrl">@qrBaseUrl</a>&nbsp;
                    <button type="button" class="btn btn-clipboard" title="Copy to clipboard" data-clipboard data-clipboard-target="#qrBaseUrl">
                        <i class="bi bi-clipboard" aria-hidden="true"></i>
                    </button>
                </div>
            }
        }
    }
    else
    {
        <div style="text-align: center; font-size: xx-large">@Loc["No sensor found with the specified Id."]</div>
    }
</div>

@*
<div id="dbgAppMode" class="alert alert-dark hidden">
    <kbd>DEBUG: Running in App mode, landing page link: <span id="linkAppMode"></span></kbd>
</div>
<div id="dbgAppModeSetLink" class="alert alert-dark hidden">
    <kbd>DEBUG: Landing page in App-mode set to: <span id="linkAppModeSetLink"></span></kbd>
</div>
*@

@section Scripts {
    @if (Model.LastMeasurement is {} lastMeasurement)
    {
        var next = lastMeasurement.EstimateNextRefresh().ToLocalTime();

        <script>
            refreshAt(@next.Hour, @next.Minute, @next.Second)
        </script>
    }
    
    <script>
    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true) {
        linkAppMode.textContent = getCookie("auto");
        dbgAppMode.classList.toggle('hidden', false);
    }
    </script>
    
    @if (@Model.AccountSensorEntity?.Account.AppPath is { } appLink) {
        <script>
        @*linkAppModeSetLink.textContent = "@appLink";
        dbgAppModeSetLink.classList.toggle('hidden', false);*@
        console.log("Landing page for App-mode set to: @appLink");

        setCookie("auto", "@appLink", 365*10);
        </script>
    }
}
