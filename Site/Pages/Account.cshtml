@page
@using Microsoft.AspNetCore.Mvc.Localization
@using QRCoder
@using SixLabors.ImageSharp
@using Microsoft.AspNetCore.Http.Extensions
@model Account
@inject IViewLocalizer Loc

@{
    ViewData["Title"] = "Account";
}

<p class=""><div id="installContainer" class="alert alert-success small-alert hidden">
    Je kunt WaterAlarm.be nu ook installeren als <i>app</i>.  Druk hiervoor op de knop
    <button id="butInstall" type="button">
        installeren
    </button>.
</div></p>

<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">WaterAlarm</li>
        <li class="breadcrumb-item active" aria-current="page">@Loc["Your account"]</li>
    </ol>
</nav>

@if (Model.Measurements == null)
{
    @: Account not found
}
else
{
    <div class="container-sm">
        <div class="row mx-auto">
            @foreach (var measurement in Model.Measurements)
            {
                <div class="col col-lg-4">
                    <div class="card" style="margin-top: 10px; margin-bottom: 10px;">
                        <div class="card-body">
                            <div class="card-title" style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">
                                @measurement.AccountSensor.Name
                            </div>
                            <div style="text-align: center;">
                                @await Component.InvokeAsync("Waterlevel", new { measurementEx = measurement })
                            </div>
                            <div style="text-align: center;">
                                <a href="@measurement.AccountSensor.RestPath" class="btn btn-primary">@Loc["Sensor details"]</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<div id="dbgAppMode" class="alert alert-dark hidden">
    <kbd>DEBUG: Running in App mode, landing page link: <span id="linkAppMode"></span></kbd>
</div>
<div id="dbgAppModeSetLink" class="alert alert-dark hidden">
    <kbd>DEBUG: Landing page in App-mode set to: <span id="linkAppModeSetLink"></span></kbd>
</div>

@section Scripts {
    @if (Model.Measurements != null && Model.Measurements.Any())
    {
        var next = Model.Measurements.Select(m => m.EstimateNextRefresh()).Min().ToLocalTime();

        <script>
            refreshAt(@next.Hour, @next.Minute, @next.Second)
        </script>
    }

    <script>
    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true) {
        linkAppMode.textContent = getCookie("auto");
        dbgAppMode.classList.toggle('hidden', false);
    }
    </script>
    
    @if (Model.AccountEntity?.AppPath is { } appLink) {
        <script>
        linkAppModeSetLink.textContent = "@appLink";
        dbgAppModeSetLink.classList.toggle('hidden', false);
        console.log("Landing page for App-mode set to: @appLink");

        setCookie("auto", "@appLink", 365*10);
        </script>
    }
}
