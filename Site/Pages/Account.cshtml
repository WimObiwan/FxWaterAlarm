@page
@using Core.Util
@using Microsoft.AspNetCore.Mvc.Localization
@using QRCoder
@using Site.Utilities
@using SixLabors.ImageSharp
@using Microsoft.AspNetCore.Http.Extensions
@model Account
@inject IUserInfo UserInfo
@inject IViewLocalizer Loc

@{
    ViewData["Title"] = "Account";
}

@if (await UserInfo.IsAdmin())
{
<div class="alert alert-warning small-alert">
    <div>
        Administration mode
        - @Model.AccountEntity?.Name (@Model.AccountEntity?.Email)
    </div>
    <div>
        <div>
            Account ID: <span id="accountId" style="font-weight: bold;">@Model.AccountEntity?.Uid</span>
            <button type="button" class="btn btn-clipboard" title="Copy to clipboard" data-clipboard data-clipboard-target="#accountId">
                <i class="bi bi-clipboard" aria-hidden="true"></i>
            </button>
        </div>
        <div>
            Link: <span id="link" style="font-weight: bold;">@Model.AccountEntity?.Link</span>
            <button type="button" class="btn btn-clipboard" title="Copy to clipboard" data-clipboard data-clipboard-target="#link">
                <i class="bi bi-clipboard" aria-hidden="true"></i>
            </button>
        </div>
    </div>
    <div>
        <form method="post" action="?handler=AddSensor">
            <input type="text" class="form-control form-control-sm" name="deveui" placeholder="deveui" required>
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-secondary btn-sm">
                Add sensor
            </button>
        </form>
    </div>
</div>
}

<p class=""><div id="installContainer" class="alert alert-success small-alert hidden">
    Je kunt WaterAlarm.be nu ook installeren als <i>app</i>.  Druk hiervoor op de knop
    <button id="butInstall" type="button">
        installeren
    </button>.
</div></p>

@if (@Model.Message is {} message)
{
    <div class="alert alert-info">
        @message
    </div>
}

<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">WaterAlarm</li>
        <li class="breadcrumb-item active" aria-current="page">@Loc["Your account"]</li>
    </ol>
</nav>

@if (Model.AccountSensors == null)
{
    @: Account not found
}
else
{
    <div class="container-sm">
        <div class="row mx-auto">
            @foreach (var accountSensorWithMeasurement in Model.AccountSensors)
            {
                var accountSensor = accountSensorWithMeasurement.Item1;
                var measurement = accountSensorWithMeasurement.Item2;
                <div class="col col-lg-4">
                    <div class="card" style="margin-top: 10px; margin-bottom: 10px;">
                        <div class="card-body">
                            @if (string.IsNullOrEmpty(accountSensor.Name))
                            {
                                <div class="card-title" style="text-align: center; font-size: medium; text-decoration: wavy; line-height: 200%;">
                                    @accountSensor.Sensor.DevEui
                                </div>
                            }
                            else
                            {
                                <div class="card-title" style="text-align: center; font-size: xx-large; text-decoration: underline; line-height: 200%;">
                                    @accountSensor.Name
                                </div>
                            }
                            @if (measurement is MeasurementLevelEx measurementLevelEx)
                            {
                                <div style="text-align: center;">
                                    @await Component.InvokeAsync("Waterlevel", new { measurementLevelEx = measurementLevelEx })
                                </div>
                            }
                            else if (measurement is MeasurementDetectEx measurementDetectEx)
                            {
                                <div style="text-align: center;">
                                    @await Component.InvokeAsync("Detect", new { measurementDetectEx = measurementDetectEx })
                                </div>
                            }
                            else if (measurement is MeasurementMoistureEx measurementMoistureEx)
                            {
                                <div style="text-align: center;">
                                    @await Component.InvokeAsync("Moisture", new { measurementMoistureEx = measurementMoistureEx })
                                </div>
                            }
                            <div style="text-align: center; margin-top: 20px;">
                                <a href="@accountSensor.RestPath" class="btn btn-primary">@Loc["Sensor details"]</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@*
<div id="dbgAppMode" class="alert alert-dark hidden">
    <kbd>DEBUG: Running in App mode, landing page link: <span id="linkAppMode"></span></kbd>
</div>
<div id="dbgAppModeSetLink" class="alert alert-dark hidden">
    <kbd>DEBUG: Landing page in App-mode set to: <span id="linkAppModeSetLink"></span></kbd>
</div>
*@

@section Scripts {
    @if (Model.AccountSensors != null && Model.AccountSensors.Any())
    {
        var next = Model.AccountSensors
            .Select(m => m.Item2)
            .Where(m => m != null)
            .Select(m => (DateTime?)m!.EstimateNextRefresh())
            .Min();

        if (next != null)
        {
            var nextLocal = next.Value.ToLocalTime();
            <script>
                refreshAt(@nextLocal.Hour, @nextLocal.Minute, @nextLocal.Second)
            </script>
        }
    }

    <script>
    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true) {
        linkAppMode.textContent = getCookie("auto");
        dbgAppMode.classList.toggle('hidden', false);
    }
    </script>
    
    @if (Model.AccountEntity?.AppPath is { } appLink) {
        <script>
        @*linkAppModeSetLink.textContent = "@appLink";
        dbgAppModeSetLink.classList.toggle('hidden', false);*@
        console.log("Landing page for App-mode set to: @appLink");

        setCookie("auto", "@appLink", 365*10);
        </script>
    }
}
